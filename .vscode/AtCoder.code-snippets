{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }y

	"python templete":{
		"scope": "python",
		"prefix": "atcoder",
		"body":[
			"import numpy as np\n"
		]
	},

	"python maper":{
		"scope": "python",
		"prefix": "maper",
		"body":[
			"map(int,input().split())"
		]
	},

	"python modinv":{
		"scope": "python",
		"prefix": "modinv",
		"body": [
			"def modinv(a, m):",
    		"\tb = m",
    		"\tu = 1",
    		"\tv = 0",
    		"\twhile b:",
        	"\t\tt = a // b",
        	"\t\ta -= t * b",
        	"\t\ta,b = b,a",
        	"\t\tu -= t * v",
        	"\t\tu,v = v,u",
    		"\tu %= m",
    		"\tif u < 0:",
        	"\t\tu += m",
    		"\treturn u",
		]
	},

	"C++ templete":{
		"scope": "cpp",
		"prefix": "atcoder",
		"body":[
			"#include<bits/stdc++.h>",
			"#define rep(i, s, n) for (long long i = s; i < (int)(n); i++)",
			"#define all(a) a.begin(), a.end()",
			"#define put(i) cout<<fixed<<i<<endl",
			"using namespace std;",
			"using ll = long long;\n",
			"int main()"
		]	
	},

	"C++ for":{
		"scope": "cpp",
		"prefix": "loop",
		"body": "for(ll i=0; i<n; i++)"
	},

	"C++ for2":{
		"scope": "cpp",
		"prefix": "loop2",
		"body": "for(ll j=0; j<n; j++)"
	},

	"unionfind": {
        "prefix": "unionfind",
        "body": [
            "struct UnionFind {",
            "    //自身が親であれば、その集合に属する頂点数に-1を掛けたもの",
            "    //そうでなければ親のid",
            "    vector<int> r;",
            " ",
            "    UnionFind(int N) {",
            "        r = vector<int>(N, -1);",
            "    }",
            " ",
            "    int root(int x) {",
            "        if (r[x] < 0) return x;",
            "        return r[x] = root(r[x]);",
            "    }",
            " ",
            "    bool unite(int x, int y) {",
            "        x = root(x);",
            "        y = root(y);",
            "        if (x == y) return false;",
            "        if (r[x] > r[y]) swap(x, y);",
            "        r[x] += r[y];",
            "        r[y] = x;",
            "        return true;",
            "    }",
            " ",
            "    int size(int x) {",
            "        return -r[root(x)];",
            "    }",
            "};",
        ],
        "description": ""
	},

	"WeightedUnionFind": {
		"prefix": "WeightedUnionFind",
		"scope": "cpp",
        "body": [
            "template<class Abel> struct UnionFind {",
            "    vector<int> par;",
            "    vector<int> rank;",
            "    vector<Abel> diff_weight;",
            "",
            "    UnionFind(int n = 1, Abel SUM_UNITY = 0) {",
            "        init(n, SUM_UNITY);",
            "    }",
            "",
            "    void init(int n = 1, Abel SUM_UNITY = 0) {",
            "        par.resize(n); rank.resize(n); diff_weight.resize(n);",
            "        for (int i = 0; i < n; ++i) par[i] = i, rank[i] = 0, diff_weight[i] = SUM_UNITY;",
            "    }",
            "",
            "    int root(int x) {",
            "        if (par[x] == x) {",
            "            return x;",
            "        }",
            "        else {",
            "            int r = root(par[x]);",
            "            diff_weight[x] += diff_weight[par[x]];",
            "            return par[x] = r;",
            "        }",
            "    }",
            "",
            "    Abel weight(int x) {",
            "        root(x);",
            "        return diff_weight[x];",
            "    }",
            "",
            "    bool issame(int x, int y) {",
            "        return root(x) == root(y);",
            "    }",
            "",
            "    bool merge(int x, int y, Abel w) {",
            "        w += weight(x); w -= weight(y);",
            "        x = root(x); y = root(y);",
            "        if (x == y) return false;",
            "        if (rank[x] < rank[y]) swap(x, y), w = -w;",
            "        if (rank[x] == rank[y]) ++rank[x];",
            "        par[y] = x;",
            "        diff_weight[y] = w;",
            "        return true;",
            "    }",
            "",
            "    Abel diff(int x, int y) {",
            "        return weight(y) - weight(x);",
            "    }",
            "};",
        ],
        "description": ""
    },
    
    "eratosthenes": {
        "prefix": "eratosthenes",
        "body": [
            "def eratosthenes(limit):",
            "    A = [i for i in range(2, limit+1)]",
            "    P = []",
            "    time = 0",
            "    ",
            "    while True:",
            "        prime = min(A)",
            "        ",
            "        if prime > math.sqrt(limit):",
            "            break",
            "            ",
            "        P.append(prime)",
            "            ",
            "        i = 0",
            "        while i < len(A):",
            "            if A[i] % prime == 0:",
            "                A.pop(i)",
            "                continue",
            "            i += 1",
            "            ",
            "    for a in A:",
            "        P.append(a)",
            "            ",
            "    return len(P)",
        ],
        "description": ""
    },



}