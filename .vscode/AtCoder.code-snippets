{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }y

	"python templete":{
		"scope": "python",
		"prefix": "atcoder",
		"body":[
			"import numpy as np\n"
		]
	},

	"python maper":{
		"scope": "python",
		"prefix": "maper",
		"body":[
			"map(int,input().split())"
		]
	},

	"python modinv":{
		"scope": "python",
		"prefix": "modinv",
		"body": [
			"def modinv(a, m):",
    		"\tb = m",
    		"\tu = 1",
    		"\tv = 0",
    		"\twhile b:",
        	"\t\tt = a // b",
        	"\t\ta -= t * b",
        	"\t\ta,b = b,a",
        	"\t\tu -= t * v",
        	"\t\tu,v = v,u",
    		"\tu %= m",
    		"\tif u < 0:",
        	"\t\tu += m",
    		"\treturn u",
		]
	},

	"C++ templete":{
		"scope": "cpp",
		"prefix": "atcoder",
		"body":[
			"#include<bits/stdc++.h>",
			"#define rep(i, s, n) for (long long i = s; i < (int)(n); i++)",
			"#define all(a) a.begin(), a.end()",
			"#define put(i) cout<<fixed<<i<<endl",
			"using namespace std;",
			"using ll = long long;\n",
			"int main()"
		]	
	},

	"C++ for":{
		"scope": "cpp",
		"prefix": "loop",
		"body": "for(ll i=0; i<n; i++)"
	},

	"C++ for2":{
		"scope": "cpp",
		"prefix": "loop2",
		"body": "for(ll j=0; j<n; j++)"
	},

	"unionfind": {
        "prefix": "unionfind",
        "body": [
            "struct UnionFind {",
            "    //自身が親であれば、その集合に属する頂点数に-1を掛けたもの",
            "    //そうでなければ親のid",
            "    vector<int> r;",
            " ",
            "    UnionFind(int N) {",
            "        r = vector<int>(N, -1);",
            "    }",
            " ",
            "    int root(int x) {",
            "        if (r[x] < 0) return x;",
            "        return r[x] = root(r[x]);",
            "    }",
            " ",
            "    bool unite(int x, int y) {",
            "        x = root(x);",
            "        y = root(y);",
            "        if (x == y) return false;",
            "        if (r[x] > r[y]) swap(x, y);",
            "        r[x] += r[y];",
            "        r[y] = x;",
            "        return true;",
            "    }",
            " ",
            "    int size(int x) {",
            "        return -r[root(x)];",
            "    }",
            "};",
        ],
        "description": ""
    },

}